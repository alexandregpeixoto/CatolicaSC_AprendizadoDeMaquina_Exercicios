{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMIDRZdO3DUm1TXhmmNxnhs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kUjsBeuSZnIn","executionInfo":{"status":"ok","timestamp":1701794988998,"user_tz":180,"elapsed":351,"user":{"displayName":"Alexandre Gervasi Peixoto","userId":"17498495996009388107"}},"outputId":"7e7d4da3-3246-4d47-c307-90c2d0bd462a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Kernel: linear\n","Acuracia: 1.0000\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        15\n","           1       1.00      1.00      1.00        15\n","           2       1.00      1.00      1.00        15\n","\n","    accuracy                           1.00        45\n","   macro avg       1.00      1.00      1.00        45\n","weighted avg       1.00      1.00      1.00        45\n","\n","\n","\n","Kernel: poly\n","Acuracia: 0.9111\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        15\n","           1       0.79      1.00      0.88        15\n","           2       1.00      0.73      0.85        15\n","\n","    accuracy                           0.91        45\n","   macro avg       0.93      0.91      0.91        45\n","weighted avg       0.93      0.91      0.91        45\n","\n","\n","\n","Kernel: sigmoid\n","Acuracia: 0.3333\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.00      0.00      0.00        15\n","           1       0.00      0.00      0.00        15\n","           2       0.33      1.00      0.50        15\n","\n","    accuracy                           0.33        45\n","   macro avg       0.11      0.33      0.17        45\n","weighted avg       0.11      0.33      0.17        45\n","\n","\n","\n","Kernel: rbf\n","Acuracia: 0.9778\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        15\n","           1       0.94      1.00      0.97        15\n","           2       1.00      0.93      0.97        15\n","\n","    accuracy                           0.98        45\n","   macro avg       0.98      0.98      0.98        45\n","weighted avg       0.98      0.98      0.98        45\n","\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","# Função para avaliar diferentes kernels\n","def avaliar_kernel(kernel):\n","    # Criar o modelo SVM com o kernel atual\n","    modelo = SVC(kernel=kernel, gamma='auto')\n","\n","    # Treinar o modelo\n","    modelo.fit(X_train, y_train)\n","\n","    # Fazer previsões no conjunto de teste\n","    y_pred = modelo.predict(X_test)\n","\n","    # Avaliar o desempenho\n","    acuracia = accuracy_score(y_test, y_pred)\n","    report = classification_report(y_test, y_pred)\n","\n","    # Imprimir os resultados\n","    print(f\"Kernel: {kernel}\")\n","    print(f\"Acuracia: {acuracia:.4f}\")\n","    print(\"Classification Report:\\n\", report)\n","    print(\"\\n\")\n","    return acuracia\n","\n","# Carrega o conjunto de dados Iris\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Divide os dados em conjuntos de treinamento e teste\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\n","\n","testLinear = avaliar_kernel('linear')\n","testPoly = avaliar_kernel('poly')\n","testSigmoid = avaliar_kernel('sigmoid')\n","testRBF = avaliar_kernel('rbf')"]}]}